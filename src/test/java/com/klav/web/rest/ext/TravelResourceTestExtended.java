package com.klav.web.rest.ext;

import com.klav.KlavApp;
import com.klav.domain.Travel;
import com.klav.domain.enumeration.DeliveryMode;
import com.klav.repository.TravelRepository;
import com.klav.repository.ext.TravelRepositoryExtended;
import com.klav.service.dto.TravelDTO;
import com.klav.service.ext.TravelServiceExtended;
import com.klav.web.rest.TestUtil;
import com.klav.web.rest.TravelResource;
import com.klav.web.rest.errors.ExceptionTranslator;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.List;

import static com.klav.web.rest.TestUtil.createFormattingConversionService;
import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

/**
 * Travel management functional tests
 **/
@RunWith(SpringRunner.class)
@SpringBootTest(classes = KlavApp.class)
public class TravelResourceTestExtended {


    private static final Instant DEFAULT_DEPARTURE_DATE = Instant.ofEpochMilli(0L);
    private static final Instant UPDATED_DEPARTURE_DATE = Instant.now().truncatedTo(ChronoUnit.MILLIS);

    private static final Instant DEFAULT_ARRIVAL_DATE = Instant.ofEpochMilli(0L);
    private static final Instant UPDATED_ARRIVAL_DATE = Instant.now().truncatedTo(ChronoUnit.MILLIS);

    private static final String DEFAULT_DEPARTURE_COUNTRY = "FRANCE";
    private static final String UPDATED_DEPARTURE_COUNTRY = "BBBBBBBBBB";

    private static final String DEFAULT_ARRIVAL_COUNTRY = "MOROCCO";
    private static final String UPDATED_ARRIVAL_COUNTRY = "BBBBBBBBBB";

    private static final String DEFAULT_DEPARTURE_CITY = "LYON";
    private static final String UPDATED_DEPARTURE_CITY = "BBBBBBBBBB";

    private static final String DEFAULT_ARRIVAL_CITY = "RABAT";
    private static final String UPDATED_ARRIVAL_CITY = "BBBBBBBBBB";

    private static final Double DEFAULT_AVAILABLE_K_GS = 10D;
    private static final Double UPDATED_AVAILABLE_K_GS = 2D;

    private static final Float DEFAULT_PRICE_PER_KG = 10F;
    private static final Float UPDATED_PRICE_PER_KG = 2F;

    private static final String DEFAULT_TRAVEL_MODE = "PLANE";
    private static final String UPDATED_TRAVEL_MODE = "BBBBBBBBBB";

    private static final DeliveryMode DEFAULT_DELEVERY_MODE = DeliveryMode.HOMEDELEVERY;
    private static final DeliveryMode UPDATED_DELEVERY_MODE = DeliveryMode.HOMEWITHDRAWAL;

    private static final String DEFAULT_HOW_TO_CONTACT_DESCRIPTION = "I dont know what tis field means, but you can contact on this platform by chat ";
    private static final String UPDATED_HOW_TO_CONTACT_DESCRIPTION = "BBBBBBBBBB";

    private static final String DEFAULT_COMPLEMENTARY_RULES = "I'm not taking packages from more than 5 kg each";
    private static final String UPDATED_COMPLEMENTARY_RULES = "BBBBBBBBBB";

    private static final Boolean DEFAULT_BOOKABLE = true;
    private static final Boolean UPDATED_BOOKABLE = true;

    private static final String DEFAULT_ACCESS_CODE = "This code will be auto generated by the platform";
    private static final String UPDATED_ACCESS_CODE = "BBBBBBBBBB";

    @Autowired
    private TravelServiceExtended travelServiceExtended;

    @Autowired
    private MappingJackson2HttpMessageConverter jacksonMessageConverter;

    @Autowired
    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;

    @Autowired
    private ExceptionTranslator exceptionTranslator;

    @Autowired
    private EntityManager em;

    private MockMvc restTravelMockMvc;

    private TravelDTO travel;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        final TravelResourceExtended travelResource = new TravelResourceExtended(travelServiceExtended);
        this.restTravelMockMvc = MockMvcBuilders.standaloneSetup(travelResource)
            .setCustomArgumentResolvers(pageableArgumentResolver)
            .setControllerAdvice(exceptionTranslator)
            .setConversionService(createFormattingConversionService())
            .setMessageConverters(jacksonMessageConverter).build();
    }

    /**
     * Create an entity for this test.
     * <p>
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static TravelDTO createEntity(EntityManager em) {
        TravelDTO travelDTO = new TravelDTO();
        travelDTO.setDepartureDate(DEFAULT_DEPARTURE_DATE);

        travelDTO.setArrivalDate(DEFAULT_ARRIVAL_DATE);
        travelDTO.setDepartureCountry(DEFAULT_DEPARTURE_COUNTRY);
        travelDTO.setArrivalCountry(DEFAULT_ARRIVAL_COUNTRY);
        travelDTO.setDepartureCity(DEFAULT_DEPARTURE_CITY);
        travelDTO.setArrivalCity(DEFAULT_ARRIVAL_CITY);
        travelDTO.setAvailableKGs(DEFAULT_AVAILABLE_K_GS);
        travelDTO.setPricePerKG(DEFAULT_PRICE_PER_KG);
        travelDTO.setTravelMode(DEFAULT_TRAVEL_MODE);
        travelDTO.setDeleveryMode(DEFAULT_DELEVERY_MODE);
        travelDTO.setHowToContactDescription(DEFAULT_HOW_TO_CONTACT_DESCRIPTION);
        travelDTO.setComplementaryRules(DEFAULT_COMPLEMENTARY_RULES);
        travelDTO.setBookable(DEFAULT_BOOKABLE);

        return travelDTO;
    }

    @Before
    public void initTest() {
        travel = createEntity(em);
    }

    @Test
    @Transactional
    public void should_create_travel_with_every_fields_filled() throws Exception {
        int databaseSizeBeforeCreate = travelServiceExtended.getAllTravels().size();

        // Create the Travel
        restTravelMockMvc.perform(post("/api/extended/travels")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(travel)))
            .andExpect(status().isCreated());

        // Validate the Travel in the database
        List<TravelDTO> travelList = travelServiceExtended.getAllTravels();
        assertThat(travelList).hasSize(databaseSizeBeforeCreate + 1);
        TravelDTO testTravel = travelList.get(travelList.size() - 1);
        assertThat(testTravel.getDepartureDate()).isEqualTo(DEFAULT_DEPARTURE_DATE);
        assertThat(testTravel.getArrivalDate()).isEqualTo(DEFAULT_ARRIVAL_DATE);
        assertThat(testTravel.getDepartureCountry()).isEqualTo(DEFAULT_DEPARTURE_COUNTRY);
        assertThat(testTravel.getArrivalCountry()).isEqualTo(DEFAULT_ARRIVAL_COUNTRY);
        assertThat(testTravel.getDepartureCity()).isEqualTo(DEFAULT_DEPARTURE_CITY);
        assertThat(testTravel.getArrivalCity()).isEqualTo(DEFAULT_ARRIVAL_CITY);
        assertThat(testTravel.getAvailableKGs()).isEqualTo(DEFAULT_AVAILABLE_K_GS);
        assertThat(testTravel.getPricePerKG()).isEqualTo(DEFAULT_PRICE_PER_KG);
        assertThat(testTravel.getTravelMode()).isEqualTo(DEFAULT_TRAVEL_MODE);
        assertThat(testTravel.getDeleveryMode()).isEqualTo(DEFAULT_DELEVERY_MODE);
        assertThat(testTravel.getHowToContactDescription()).isEqualTo(DEFAULT_HOW_TO_CONTACT_DESCRIPTION);
        assertThat(testTravel.getComplementaryRules()).isEqualTo(DEFAULT_COMPLEMENTARY_RULES);
        assertThat(testTravel.isBookable()).isEqualTo(DEFAULT_BOOKABLE);

    }


}
