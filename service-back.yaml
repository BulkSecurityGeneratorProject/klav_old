Description: >
  This is an example of a long running ECS service that needs to connect to another ECS service (product-service)
  via it's load balancer. We use environment variables to pass the URL of the product-service to this one's container(s).

Parameters:
  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id

  SG:
    Description: ECS Host security group to modify
    Type: AWS::EC2::SecurityGroup::Id

  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 2

  MaxCount:
    Description: Maximum number of instances of this task we can run across our cluster
    Type: Number
    Default: 3

  ProductServiceUrl:
    Description: The URL of the Product Service (used to fetch product information)
    Type: String

  Listener:
    Description: The Application Load Balancer listener to register with
    Type: String

  Path:
    Description: The path to register with the Application Load Balancer
    Type: String
    Default: /klav

  ECSServiceAutoScalingRoleARN:
    Description: The ECS service auto scaling role ARN
    Type: String

  Size:
    Description: A size type of infra
    Type: String
    Default: test
    AllowedValues: [prod, dev, test]
    ConstraintDescription: must specify prod, dev, or test

Conditions:
  CreateProdRessources: !Equals [!Ref Size, prod]

Resources:

  RecIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SG
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster
      ServiceName: "klavbackreview"
      Role: !Ref ServiceRole
      DesiredCount: !If [ CreateProdRessources, !Ref DesiredCount, 1 ]
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: "klavback"
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      LaunchType: "EC2"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      PlacementConstraints:
        - Type: "distinctInstance"
      PlacementStrategies:
        - Type: "spread"
          Field: "instanceId"
      SchedulingStrategy: "REPLICA"

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: klavbackreview
      Cpu: "512"
      Memory: "1700"
      NetworkMode: "bridge"
      RequiresCompatibilities:
        - "EC2"
      ContainerDefinitions:
        - Name: "klavback"
          Image: "155084925036.dkr.ecr.us-east-1.amazonaws.com/klav-back:latest"
          Cpu: 256
          Memory: 1024
          MemoryReservation: 1024
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              HostPort: 80
              Protocol: "tcp"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
          Environment:
            - Name: "_JAVA_OPTIONS"
              Value: "-Xms1024m -Xmx1024m"
            - Name: PRODUCT_SERVICE_URL
              Value: !Ref ProductServiceUrl
            - Name: "SPRING_PROFILES_ACTIVE"
              Value: "prod,swagger"
            - Name: "SPRING_DATASOURCE_URL"
              Value: "jdbc:mysql://klav-mysql:3306/klav?useUnicode=true&characterEncoding=utf8&useSSL=false"
#              Value: "jdbc:mysql://localhost:3306/klav?useUnicode=true&characterEncoding=utf8&useSSL=false"
            - Name: "JHIPSTER_SLEEP"
              Value: "10"
          User: "jhipster"
          Hostname: "klavback.test"
          Links:
            - "klav-mysql"
          Privileged: false
          ReadonlyRootFilesystem: false
        - Name: "klav-mysql"
          Image: "mysql:5.7.20"
          Cpu: 256
          Memory: 512
          MemoryReservation: 512
          Essential: true
          PortMappings:
            - ContainerPort: 3306
              Protocol: "tcp"
              HostPort: 3306
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
          Environment:
            - Name: "MYSQL_USER"
              Value: "root"
            - Name: PRODUCT_SERVICE_URL
              Value: !Ref ProductServiceUrl
            - Name: "MYSQL_ALLOW_EMPTY_PASSWORD"
              Value: "yes"
            - Name: "MYSQL_DATABASE"
              Value: "klav"
          Hostname: "klavback.mysql.test"
          Privileged: false
          ReadonlyRootFilesystem: false
          Command:
            - "mysqld"
            - "--lower_case_table_names=1"
            - "--skip-ssl"
            - "--character_set_server=utf8mb4"
            - "--explicit_defaults_for_timestamp"

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 1

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement":
                [
                  {
                    "Effect": "Allow",
                    "Action":
                      [
                        "ec2:AuthorizeSecurityGroupIngress",
                        "ec2:Describe*",
                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                        "elasticloadbalancing:Describe*",
                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                        "elasticloadbalancing:DeregisterTargets",
                        "elasticloadbalancing:DescribeTargetGroups",
                        "elasticloadbalancing:DescribeTargetHealth",
                        "elasticloadbalancing:RegisterTargets"
                      ],
                    "Resource": "*"
                  }
                ]
            }

  ServiceScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Condition: CreateProdRessources
    Properties:
      MaxCapacity: !Ref MaxCount
      MinCapacity: !Ref DesiredCount
      ResourceId: !Join
        - /
        - - service
          - !Ref Cluster
          - !GetAtt Service.Name
      RoleARN: !Ref ECSServiceAutoScalingRoleARN
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScaleOutPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Condition: CreateProdRessources
    Properties:
      PolicyName: ServiceScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 1800
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  ServiceScaleInPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Condition: CreateProdRessources
    Properties:
      PolicyName: ServiceScaleInPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 1800
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  CPUScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProdRessources
    Properties:
      AlarmName: CPU utilization greater than 90%
      AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "3"
      Threshold: "90"
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ServiceScaleOutPolicy

  CPUScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProdRessources
    Properties:
      AlarmName: CPU utilization less than 70%
      AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "10"
      Threshold: "70"
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ServiceScaleInPolicy
